[{"/Users/taylor/turing/4module/capstone/eras-fe/src/index.tsx":"1","/Users/taylor/turing/4module/capstone/eras-fe/src/reportWebVitals.ts":"2","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/App/App.tsx":"3","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/CalendarComponent/CalendarComponent.tsx":"4","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/LoginPage/LoginPage.tsx":"5","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/RequiredForm/RequiredForm.tsx":"6","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormContainer/FormContainer.tsx":"7","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/HeaderComponent/HeaderComponent.tsx":"8","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/NotFound/NotFound.tsx":"9","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Week/Week.tsx":"10","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormStartPage/FormStartPage.tsx":"11","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/TextQuestion/TextQuestion.tsx":"12","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Event/Event.tsx":"13","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Question/Question.tsx":"14","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/ProgressBar/ProgressBar.tsx":"15","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/EventForm/EventForm.tsx":"16","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/ClickedComponent/ClickedComponent.tsx":"17"},{"size":854,"mtime":1610670113032,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1608243605463,"results":"20","hashOfConfig":"19"},{"size":1254,"mtime":1610670113006,"results":"21","hashOfConfig":"19"},{"size":5063,"mtime":1610671664731,"results":"22","hashOfConfig":"19"},{"size":822,"mtime":1610670113015,"results":"23","hashOfConfig":"19"},{"size":2628,"mtime":1610671340926,"results":"24","hashOfConfig":"19"},{"size":2250,"mtime":1610671340924,"results":"25","hashOfConfig":"19"},{"size":685,"mtime":1610670113015,"results":"26","hashOfConfig":"19"},{"size":183,"mtime":1610670113017,"results":"27","hashOfConfig":"19"},{"size":1074,"mtime":1610685300032,"results":"28","hashOfConfig":"19"},{"size":1144,"mtime":1610670113012,"results":"29","hashOfConfig":"19"},{"size":1271,"mtime":1610671340928,"results":"30","hashOfConfig":"19"},{"size":3492,"mtime":1610673598725,"results":"31","hashOfConfig":"19"},{"size":4343,"mtime":1610671340925,"results":"32","hashOfConfig":"19"},{"size":534,"mtime":1610670113019,"results":"33","hashOfConfig":"19"},{"size":1339,"mtime":1610670113009,"results":"34","hashOfConfig":"19"},{"size":876,"mtime":1610674142672,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"c5br1r",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/taylor/turing/4module/capstone/eras-fe/src/index.tsx",[],["75","76"],"/Users/taylor/turing/4module/capstone/eras-fe/src/reportWebVitals.ts",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/App/App.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/CalendarComponent/CalendarComponent.tsx",["77","78","79","80","81","82"],"import React, { useEffect, useState } from 'react';\nimport Week from '../Week/Week';\nimport Event from '../Event/Event'\nimport HeaderComponent from '../HeaderComponent/HeaderComponent'\nimport './CalendarComponent.css';\nimport AdditionalQuestions from '../AdditionalQuestions/AdditionalQuestions'\nimport ClickedComponent from '../ClickedComponent/ClickedComponent'\nimport { gql, useQuery } from '@apollo/client';\n\n\ntype CalenderComponentProps = {\n  userId: number;\n};\ntype event = {\n  color: string | null;\n  date: string;\n  id: string;\n  name: string;\n  weekNumber: number;\n};\ntype era = {\n  color: string | null,\n  startWeek: number,\n  endWeek: number,\n  id: string,\n  name: string,\n  weekNumber: number\n  startDate:string\n  endDate:string\n}\nexport const Get_User = gql`\n  query getUser($id: ID!) {\n    getUser(id: $id) {\n      id\n      name\n      currentWeek\n      events {\n        id\n        name\n        date\n        weekNumber\n        color\n      }\n      eras {\n        id\n        name\n        startWeek\n        endWeek\n        startDate\n        endDate\n        color\n      }\n    }\n  }\n`;\n\nconst CalendarComponent = (props: CalenderComponentProps) => {\n\n  let [newEras, addEra] = useState <era[]>([])\n  let [weekClicked ,clickWeek] = useState(false)\n  let [currentWeekClicked,upDateWeekClicked] = useState<any>({})\n  let id = props.userId\n  if(props.userId ===0 || props.userId ===null && sessionStorage.getItem('userId') !== undefined ){\n    //@ts-ignore\n    id =JSON.parse(sessionStorage.getItem('userId'))\n  }\n\n  const { data, loading, error } = useQuery(Get_User, {\n    variables: { id: id }\n  });\n  if(error && !id ){\n    return <p>Please make a user before trying to make a calendar</p>\n  }\n  if (loading) {\n    return <p>Loading your Calender</p>;\n  }\n  if (error) {\n    return <p>Something went wrong</p>;\n  }\n\n\n  let calendar = new Array(90);\n  calendar.fill({});\n  let display = calendar.map((year, index) => {\n    let weeks = new Array(52);\n    weeks.fill('');\n    let weeksDisplay = weeks.map((week, i) => {\n      let currentWeek = i + 1;\n      if (index > 0) {\n        currentWeek = i + 1 + index * 52;\n      }\n      let currentEvent = data.getUser.events.find((event: event) => {\n        return event.weekNumber === currentWeek;\n      });\n      let currentNewEra = newEras.find((era: era) =>{\n        if (currentWeek > era.endWeek) return false;\n\n        if (era.startWeek <= currentWeek) {\n          return true;\n        }\n      })\n      let currentEra = data.getUser.eras.find((era: era) => {\n        if (currentWeek > era.endWeek) return false;\n\n        if (era.startWeek <= currentWeek) {\n          return true;\n        }\n      });\n      if(currentNewEra){\n        return (\n          <Week\n            startDate = {currentNewEra.startDate}\n            endDate = {currentNewEra.endDate}\n            upDateWeekClicked = {upDateWeekClicked}\n            clickWeek = {clickWeek}\n            key={currentWeek}\n            index={currentWeek}\n            color={currentNewEra.color}\n            name={currentNewEra.name}\n          />\n        );\n      }\n      if (currentEvent) {\n        return (\n          <Week\n            upDateWeekClicked = {upDateWeekClicked}\n            clickWeek = {clickWeek}\n            key={currentWeek}\n            index={currentWeek}\n            color={currentEvent.color}\n            name={currentEvent.name}\n          />\n        );\n      }\n      \n      if (currentEra) {\n        return (\n          <Week\n            startDate = {currentEra.startDate}\n            endDate = {currentEra.endDate}\n            upDateWeekClicked = {upDateWeekClicked}\n            clickWeek = {clickWeek}\n            key={currentWeek}\n            index={currentWeek}\n            color={currentEra.color}\n            name={currentEra.name}\n          />\n        );\n      }\n      if(data.getUser.currentWeek <= currentWeek){\n       return( <Week\n          upDateWeekClicked = {upDateWeekClicked}\n          clickWeek = {clickWeek}\n          key={currentWeek}\n          index={currentWeek}\n          color={'white'}\n          name={null}\n        />\n      )\n     }\n\n      return (\n        <Week\n          upDateWeekClicked = {upDateWeekClicked}\n          clickWeek = {clickWeek}\n          key={currentWeek}\n          index={currentWeek}\n          color={'none'}\n          name={null}\n        />\n      );\n    });\n\n    if (index < 10 ) {\n      //@ts-ignore\n      index = '0' + index\n    }\n\n    return (\n      <section className='weeks-display' key={index}>\n        Age: {index}\n        {weeksDisplay}\n      </section>\n    );\n  });\n\n  return (\n    <section>\n      <HeaderComponent />\n      <h1 className='calendar-title'>Your Calendar</h1>\n        <Event userId = {props.userId} newEras = {newEras} addEra = {addEra} />\n          {weekClicked && <ClickedComponent name ={currentWeekClicked.name} startDate = {currentWeekClicked.startDate} endDate = {currentWeekClicked.endDate}/>}\n      <p className='week-title'>Weeks</p>\n      <div className='calendar-area'>\n      {display}\n      </div>\n    </section>\n  );\n};\n\n\nexport default CalendarComponent;\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/LoginPage/LoginPage.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/RequiredForm/RequiredForm.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormContainer/FormContainer.tsx",["83","84","85","86","87"],"import React, { ReactElement, useEffect, useState } from 'react';\nimport { Redirect} from \"react-router-dom\";\nimport { Question } from '../Question/Question';\nimport HeaderComponent from '../HeaderComponent/HeaderComponent';\nimport ProgressBar from '../ProgressBar/ProgressBar';\nimport { gql, useQuery } from '@apollo/client';\nimport { queryHelpers } from '@testing-library/react';\nimport CalendarComponent from '../CalendarComponent/CalendarComponent';\nimport './FormContainer.css';\n\n\ntype FormContaineProps = {\n  userId: number;\n};\n\ninterface Question {\n  question: string;\n  name: string;\n  id: number;\n  __typename: string;\n}\n\nexport const getQuestionsQuery = gql`\n  {\n    getOnboardingQuestions {\n      id\n      question\n      name\n      eventType\n    }\n  }\n`;\n\nexport const FormContainer = (props: FormContaineProps) => {\n  let id = props.userId\n  if(props.userId ===0 && sessionStorage.length !==0){\n  //@ts-ignore\n  id =JSON.parse(sessionStorage.getItem('userId'))\n}\n  const [answers, setAnswer] = useState<string[]>([]);\n  const [currentQuestionIndex, changeQuestion] = useState(0);\n\n  const { loading, error, data } = useQuery(getQuestionsQuery);\n  if (error) {\n    return <h1>Error loading questions...</h1>;\n  }\n  if (loading || !data) {\n    return <h1>Loading...</h1>;\n  }\n\n  let questions = data.getOnboardingQuestions;\n\n  if(answers.length === questions.length) {\n   return <Redirect\n            to={{\n            pathname: \"/calendar\",\n            state: { userId: id}\n          }}\n        />\n    }\n\n  return (\n    <section>\n      <HeaderComponent />\n      <div className='form-container'>\n      <form>\n        <Question\n          questionType={questions[currentQuestionIndex].eventType}\n          currentQuestion={questions[currentQuestionIndex].question}\n          questionName = {questions[currentQuestionIndex].name}\n          changeQuestion={changeQuestion}\n          currentQuestionIndex={currentQuestionIndex}\n          setAnswer={setAnswer}\n          answers={answers}\n          userId={id}\n        />\n      </form>\n      </div>\n      <div>\n      {questions.length && (\n        <ProgressBar\n          questionsLength={questions.length}\n          answersLength={answers.length}\n        />)}\n      </div>\n    </section>\n  );\n};\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/HeaderComponent/HeaderComponent.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/NotFound/NotFound.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Week/Week.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormStartPage/FormStartPage.tsx",["88"],"import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport './FormStartPage.css';\n\ntype updateUserId = (id:number) => void\ntype FormStartPageProps = {\n  userId: number;\n  userName: string;\n  updateUserId :updateUserId\n};\nlet FormStartPage = (props: FormStartPageProps) => {\n  useEffect(() => {\n    sessionStorage.setItem(\"userId\",JSON.stringify(props.userId))\n    props.updateUserId(props.userId)\n  }, [props.userId])\n  return (\n    <section>\n      <p className='life-choice-statement'>\n        As you know life is filled with choices. We've decided to give you\n        another. You can start off editing a blank calendar by selecting \n        'Start Calendar' or you can select 'Start Form' to answer a few \n        questions that will create events for you. You can add more events\n        later if you choose!\n      </p>\n      <Link to=\"/calendar\" style={{ textDecoration: 'none'}}>\n        <button>Start Calendar</button>\n      </Link>\n      <Link to=\"/form\" style={{ textDecoration: 'none'}}>\n        <button>Start Form</button>\n      </Link>\n    </section>\n  );\n};\nexport default React.memo(FormStartPage);\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/TextQuestion/TextQuestion.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Event/Event.tsx",["89","90","91"],"import React, { useState} from 'react'\nimport EventForm from '../EventForm/EventForm'\nimport {gql, useMutation } from \"@apollo/client\";\ntype addEra = (era:any) => void\n\ntype era = {\n  color: string | null,\n  startWeek: number,\n  endWeek: number,\n  id: string,\n  name: string,\n  weekNumber: number\n}\ntype eventProps = {\n  userId: number\n  newEras: era[],\n  addEra: addEra\n}\nconst Event = (props: eventProps) => {\n  let id = props.userId\n  if(props.userId ===0 || props.userId ===null && sessionStorage.getItem('userId') !== undefined ){\n    //@ts-ignore\n    id =JSON.parse(sessionStorage.getItem('userId'))\n  }\n    let CREATE_ERA = gql`\n    mutation createEra($userId :ID!, $name:String!, $startDate:String!, $endDate:String! $color:String!){\n    createEra(input :{\n      userId: $userId,\n      name: $name,\n      startDate:$startDate,\n      endDate:$endDate,\n      color: $color\n    }){\n      userId\n      name\n      startWeek\n      endWeek\n      startDate\n      endDate\n      color\n      }\n  }`\n  const [makeMutation, { data,loading,error }] = useMutation(CREATE_ERA);\n\n  const [lifeEvent, setLifeEvent] = useState('')\n  const [startEvent, setStartEvent] = useState('')\n  const [endEvent, setEndEvent] = useState('')\n  const [display, changeDisplay] = useState(false)\n\n  const handleLifeEvent = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setLifeEvent(event.target.value)\n  }\n\n  const handleStartEvent = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setStartEvent(event.target.value)\n  }\n\n  const handleEndEvent = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setEndEvent(event.target.value)\n  }\n\n  const handleClearEvent = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setLifeEvent('')\n  }\n\n  const handleButtonClick = () => {\n    changeDisplay(true)\n  }\n  let [inputError,setError] = useState('')\n  const handleSubmit=async () =>{\n    if(Date.now() < new Date(startEvent).getTime() || Date.now() < new Date(endEvent).getTime() ){\n      setError('Invalid Dates')\n       return\n    }\n    if(new Date(startEvent).getTime() > new Date(endEvent).getTime()){\n      setError('End date can can not happen before start date')\n      return\n    }\n    if(lifeEvent === '' || startEvent ===''|| endEvent ==='' ){\n      setError('Please fill all fields')\n      return\n    }\n    let color = Math.floor(Math.random()*16777215).toString(16);\n     color = \"#\"+ color\n    let response = await makeMutation({\n      variables: {\n        userId: id,\n        name: lifeEvent,\n        startDate: startEvent.split(\"-\").reverse().join(\"-\"),\n        endDate: endEvent.split(\"-\").reverse().join(\"-\"),\n        color:color\n      },\n    }).catch(error =>{\n      return error\n    });\n    if(loading){\n      return <p>We are trying your event</p>\n    }\n    if(error){\n      return <p>Something went wrong</p>\n    }\n     \n    if(response){\n      props.addEra([...props.newEras,response.data.createEra])\n      setLifeEvent('')\n      setEndEvent('')\n      setStartEvent('')\n      changeDisplay(false)\n    }\n\n  }\n  \n\n  return (\n    <section>\n    <button onClick={handleButtonClick}>Add an Era</button>\n      {display && <EventForm\n        handleLifeEvent={handleLifeEvent}\n        handleStartEvent={handleStartEvent}\n        handleEndEvent={handleEndEvent}\n        handleClearEvent={handleClearEvent}\n        changeDisplay={changeDisplay}\n        handleSubmit = {handleSubmit}\n        />\n      }\n      {inputError && <p>{inputError}</p>}\n    </section>\n  )\n}\n\n\n\nexport default React.memo(Event);\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Question/Question.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/ProgressBar/ProgressBar.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/EventForm/EventForm.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/ClickedComponent/ClickedComponent.tsx",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":26},{"ruleId":"96","severity":1,"message":"100","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":27},{"ruleId":"101","severity":1,"message":"102","line":63,"column":24,"nodeType":"103","messageId":"104","endLine":63,"endColumn":26},{"ruleId":"101","severity":1,"message":"102","line":63,"column":48,"nodeType":"103","messageId":"104","endLine":63,"endColumn":50},{"ruleId":"105","severity":1,"message":"106","line":95,"column":51,"nodeType":"107","messageId":"108","endLine":95,"endColumn":53},{"ruleId":"105","severity":1,"message":"106","line":102,"column":58,"nodeType":"107","messageId":"108","endLine":102,"endColumn":60},{"ruleId":"96","severity":1,"message":"109","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":29},{"ruleId":"96","severity":1,"message":"97","line":1,"column":31,"nodeType":"98","messageId":"99","endLine":1,"endColumn":40},{"ruleId":"96","severity":1,"message":"110","line":7,"column":10,"nodeType":"98","messageId":"99","endLine":7,"endColumn":22},{"ruleId":"96","severity":1,"message":"111","line":8,"column":8,"nodeType":"98","messageId":"99","endLine":8,"endColumn":25},{"ruleId":"112","severity":1,"message":"113","line":16,"column":11,"nodeType":"98","messageId":"114","endLine":16,"endColumn":19},{"ruleId":"115","severity":1,"message":"116","line":15,"column":6,"nodeType":"117","endLine":15,"endColumn":20,"suggestions":"118"},{"ruleId":"101","severity":1,"message":"102","line":21,"column":24,"nodeType":"103","messageId":"104","endLine":21,"endColumn":26},{"ruleId":"101","severity":1,"message":"102","line":21,"column":48,"nodeType":"103","messageId":"104","endLine":21,"endColumn":50},{"ruleId":"96","severity":1,"message":"119","line":43,"column":26,"nodeType":"98","messageId":"99","endLine":43,"endColumn":30},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'AdditionalQuestions' is defined but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'ReactElement' is defined but never used.","'queryHelpers' is defined but never used.","'CalendarComponent' is defined but never used.","@typescript-eslint/no-redeclare","'Question' is already defined.","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["122"],"'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},"Update the dependencies array to be: [props, props.userId]",{"range":"125","text":"126"},[433,447],"[props, props.userId]"]