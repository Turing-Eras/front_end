[{"/Users/taylor/turing/4module/capstone/eras-fe/src/index.tsx":"1","/Users/taylor/turing/4module/capstone/eras-fe/src/reportWebVitals.ts":"2","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/App/App.tsx":"3","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormContainer/FormContainer.tsx":"4","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/LoginPage/LoginPage.tsx":"5","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/RequiredForm/RequiredForm.tsx":"6","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/CalendarComponent/CalendarComponent.tsx":"7","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/ProgressBar/ProgressBar.tsx":"8","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/HeaderComponent/HeaderComponent.tsx":"9","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Question/Question.tsx":"10","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/TextQuestion/TextQuestion.tsx":"11","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormStartPage/FormStartPage.tsx":"12","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Week/Week.tsx":"13","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/NavBar/NavBar.tsx":"14"},{"size":854,"mtime":1610318179902,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1608243605463,"results":"17","hashOfConfig":"16"},{"size":988,"mtime":1610318179898,"results":"18","hashOfConfig":"16"},{"size":2008,"mtime":1610413424492,"results":"19","hashOfConfig":"16"},{"size":798,"mtime":1609983807041,"results":"20","hashOfConfig":"16"},{"size":2134,"mtime":1610412879505,"results":"21","hashOfConfig":"16"},{"size":2929,"mtime":1610413939916,"results":"22","hashOfConfig":"16"},{"size":427,"mtime":1610224537285,"results":"23","hashOfConfig":"16"},{"size":442,"mtime":1610224537284,"results":"24","hashOfConfig":"16"},{"size":3470,"mtime":1610411900435,"results":"25","hashOfConfig":"16"},{"size":1150,"mtime":1610318179901,"results":"26","hashOfConfig":"16"},{"size":958,"mtime":1610413426558,"results":"27","hashOfConfig":"16"},{"size":627,"mtime":1610387986971,"results":"28","hashOfConfig":"16"},{"size":177,"mtime":1609983807033,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"c5br1r",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/taylor/turing/4module/capstone/eras-fe/src/index.tsx",[],["66","67"],"/Users/taylor/turing/4module/capstone/eras-fe/src/reportWebVitals.ts",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/App/App.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormContainer/FormContainer.tsx",["68","69","70","71"],"import React, { ReactElement, useEffect, useState } from \"react\";\nimport { Question } from \"../Question/Question\";\nimport HeaderComponent from \"../HeaderComponent/HeaderComponent\";\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { queryHelpers } from \"@testing-library/react\";\nimport CalendarComponent from \"../CalendarComponent/CalendarComponent\";\n\ntype FormContaineProps = {\n  userId: number;\n};\n\ninterface Question {\n  question: string;\n  name: string;\n  id: number;\n  __typename: string;\n}\n\nexport const getQuestionsQuery = gql`\n  {\n    getOnboardingQuestions {\n      id\n      question\n      name\n      eventType\n    }\n  }\n`;\n\nexport const FormContainer = (props: FormContaineProps) => {\n  let id:number | null;\n  id =props.userId\n  useEffect(()=>{\n        // @ts-ignore \n  id = JSON.parse(localStorage.getItem(\"userId\"))\n  },[props.userId])\n  const [answers, setAnswer] = useState<string[]>([]);\n  const [currentQuestionIndex, changeQuestion] = useState(0);\n\n  const { loading, error, data } = useQuery(getQuestionsQuery);\n  if (error) {\n    return <h1>Error loading questions...</h1>;\n  }\n  if (loading || !data) {\n    console.log('loading')\n    return <h1>Loading...</h1>;\n  }\n\n  let questions = data.getOnboardingQuestions;\n\n  if(answers.length === questions.length) {\n    return <CalendarComponent userId = {id}/>\n    }\n\n  return (\n    <>\n      {questions.length && (\n        <ProgressBar\n          questionsLength={questions.length}\n          answersLength={answers.length}\n        />\n      )}\n      {answers.length === 0 && <HeaderComponent />}\n      <form>\n        <Question\n          questionType={questions[currentQuestionIndex].eventType}\n          currentQuestion={questions[currentQuestionIndex].question}\n          changeQuestion={changeQuestion}\n          currentQuestionIndex={currentQuestionIndex}\n          setAnswer={setAnswer}\n          answers={answers}\n          userId={id}\n        />\n      </form>\n    \n    </>\n  );\n};\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/LoginPage/LoginPage.tsx",["72"],"import React, { useEffect, useState } from 'react';\n const LoginPage = () =>{\n  let [userName,typeName] = useState('')\n\n  let [password,typePass] = useState('')\nlet createUserName = (event: React.ChangeEvent<HTMLInputElement>) =>{\n  typeName(event?.target.value)\n}\nlet createPass = (event: React.ChangeEvent<HTMLInputElement>) =>{\n  typePass(event?.target.value)\n}\n//are frontend validating this before we send it\n  return (\n    <section>\n    <form>\n\n      <input value = {userName} type = 'text' name = 'userName' placeholder=\"Username\" onChange = {createUserName}\n      ></input>\n      <input value = {password} type = 'password' name = 'password' placeholder=\"Password\" onChange = {createPass}\n      ></input>\n    </form>\n    <button>Submit</button>\n    </section>\n  )\n}\nexport default LoginPage","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/RequiredForm/RequiredForm.tsx",["73"],"import React, { useState } from \"react\";\nimport TextQuestion from \"../TextQuestion/TextQuestion\";\nimport FormStartPage from \"../FormStartPage/FormStartPage\";\nimport { gql, useMutation,ApolloError } from \"@apollo/client\";\ntype updateUserId = (index: number) => void;\ntype RequiredFormProps = {\n  updateUserId: updateUserId;\n};\n\nlet RequiredForm = (props: RequiredFormProps) => {\n  let create_user = gql`\n    mutation createUser($name: String!, $email: String!, $birthdate: String!) {\n      createUser(input: { name: $name, email: $email, birthdate: $birthdate }) {\n        id\n        name\n      }\n    }\n  `;\n \n  let [createUser, { data, loading, error, called }] = useMutation(create_user);\n\n  let sendUser = async () => {\n    let Bday = answers[1];\n\n    let finalBday = Bday.split(\"-\").reverse().join(\"-\");\n    if (!loading && !called) {\n      createUser({\n        variables: {\n          name: answers[0],\n          birthdate: finalBday,\n          email: answers[2],\n        }\n      }).catch(e => {\n        return e\n      });\n    } else if (loading) {\n      return <p>Loading</p>;\n    }\n\n  };\n\n  let questions = [\n    \"What is your name\",\n    \"What is your birthday\",\n    \"What is your email address\",\n  ];\n  let [answers, addAnswer] = useState<string[]>([]);\n  let [currentQuestionIndex, updateIndex] = useState(0);\n  if (answers.length === questions.length) {\n    sendUser()\n    if(loading){\n      return <p>Loading questions</p>\n    }\n    if(error){\n      return <section>\n      {error.graphQLErrors.map(({ message }, i) => (\n      <span key={i}>{message}</span>\n    ))}\n    </section>\n    }\n  }\n  if (data) {\n     return (\n      <FormStartPage\n      updateUserId = {props.updateUserId}\n        userId={data.createUser.id}\n        userName={data.createUser.name}\n      />\n    );\n  }\n  return (\n    <form>\n      User message instructions will go here\n      <TextQuestion\n        currentQuestion={questions[currentQuestionIndex]}\n        changeQuestion={updateIndex}\n        addAnswer={addAnswer}\n        answers={answers}\n        currentQuestionIndex={currentQuestionIndex}\n      />\n    </form>\n  );\n};\nexport default RequiredForm;\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/CalendarComponent/CalendarComponent.tsx",["74","75","76"],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/ProgressBar/ProgressBar.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/HeaderComponent/HeaderComponent.tsx",["77"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n\nconst HeaderComponent = () =>{\n  return (\n      <section>\n        {/* <img src = ''> logo*/}\n        <h1>Create My Calendar</h1>\n        <button >        \n          <Link to=\"/login\">Login</Link>\n        </button>\n        <button >        \n          <Link to=\"/calender\">Calendar</Link>\n        </button>\n      </section>\n  )\n}\nexport default HeaderComponent","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Question/Question.tsx",["78"],"import React, { useState } from \"react\";\nimport { DocumentNode, gql, useMutation } from \"@apollo/client\";\n\ntype ChangeQuestion = (index: number) => void;\n\ntype SetAnswer = (answer: string[]) => void;\n\ntype QuestionProps = {\n  questionType: string;\n  changeQuestion: ChangeQuestion;\n  currentQuestionIndex: number;\n  currentQuestion: string;\n  setAnswer: SetAnswer;\n  answers: string[];\n  userId: number;\n};\n\nexport const Question = (props: QuestionProps) => {\n  const [date, updateDate] = useState(\"\");\n  const [endDate, updateEndDate] = useState(\"\");\n  const [answer, saveAnswer] = useState(\"\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateDate(event.target.value);\n    saveAnswer(event.target.value);\n  };\n  const handleEndDateChange = (event: React.ChangeEvent<HTMLInputElement>) =>{\n    updateEndDate(event.target.value)\n  }\n  \n  let figureMutation = ():DocumentNode => {\n    let mutation:DocumentNode;\n      if (props.questionType === \"event\") {\n        mutation = gql`\n          mutation createEvent($userId: ID!, $name: String!, $date: String!) {\n            createEvent(input: { userId: $userId, name: $name, date: $date }){\n              userId\n            }\n          }\n        `;\n      }\n      if (props.questionType === \"era\") {\n        mutation = gql`\n          mutation createEra($userId :ID!, $name:String!, $startDate:String!, $endDate:String!, $color:String!){\n          createEra(input :{\n            userId: $userId,\n            name: $name,\n            startDate:$startDate,\n            endDate:$endDate,\n            color:$color,\n          }){\n            userId\n            }\n        }`\n;\n    }\n    // @ts-ignore \n    return mutation\n  }\n\n  const [makeMutation, { data }] = useMutation(figureMutation());\n\n  return (\n    <>\n      <h1>{props.currentQuestion}</h1>\n      <input\n        data-testid=\"date\"\n        type=\"date\"\n        onChange={handleChange}\n        value={date}\n      ></input>\n      {props.questionType === \"era\" && (\n        <input\n          data-testid=\"date\"\n          type=\"date\"\n          onChange={handleEndDateChange}\n          value={endDate}\n        ></input>\n      )}\n      <button\n        type=\"button\"\n        onClick={() => {\n          props.changeQuestion(props.currentQuestionIndex + 1);\n          props.setAnswer([...props.answers, \"\"]);\n          updateDate(\"\");\n        }}\n      >\n        Skip\n      </button>\n     {date.length === 10 && (props.questionType === 'event' || endDate.length ===10) &&  <button\n        type=\"button\"\n        onClick={() => {\n          if (props.questionType === \"event\") {\n            makeMutation({\n              variables: {\n                userId: props.userId,\n                name: props.currentQuestion,\n                date: date.split(\"-\").reverse().join(\"-\"),\n              },\n            });\n          }\n          if (props.questionType === \"era\") {\n            makeMutation({\n              variables: {\n                userId: props.userId,\n                name: props.currentQuestion,\n                startDate: date.split(\"-\").reverse().join(\"-\"),\n                endDate: endDate.split(\"-\").reverse().join(\"-\"),\n                color: \"purple\",\n              },\n            });\n            updateEndDate(\"\");\n          }\n          props.changeQuestion(props.currentQuestionIndex + 1);\n          props.setAnswer([...props.answers, answer]);\n          updateDate(\"\");\n        }}\n      >\n        Next\n      </button>\n}\n    </>\n  );\n};\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/TextQuestion/TextQuestion.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormStartPage/FormStartPage.tsx",["79"],"import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\ntype updateUserId = (id:number) => void\ntype FormStartPageProps = {\n  userId: number;\n  userName: string;\n  updateUserId :updateUserId\n};\nlet FormStartPage = (props: FormStartPageProps) => {\n  useEffect(() => {\n    localStorage.setItem(\"userId\",JSON.stringify(props.userId))\n    props.updateUserId(props.userId)\n  }, [props.userId])\n  return (\n    <section>\n      <p>\n        As you know life is filled with choices. We've decided to give you\n        another. You can either start off editend your calendar from a blank\n        calendar or you can start off editing on a calendar with some events. If\n        you choose the prefilled calender\n      </p>\n      <Link to=\"/calender\">\n        <button>Start Calender</button>\n      </Link>\n      <Link to=\"/form\">\n        <button>Start Form</button>\n      </Link>\n    </section>\n  );\n};\nexport default React.memo(FormStartPage);\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Week/Week.tsx",["80","81"],"import React, { useEffect, useState } from 'react';\nimport './Week.css';\n\ntype WeekProps = {\n  key: number;\n  index: number;\n  color: string | null;\n  name: string | null;\n};\n\nconst Week = (props: WeekProps) => {\n  let color:string | null;\n  if(props.color === null){\n    color = 'purple'\n  }\n  if(props.color === 'none'){\n    color = 'red'\n  }\n  else{\n    color = props.color\n  }\n  let handleClick = () => {\n    console.log('you clicked', props.name)\n    console.log(color)\n  };\n    // @ts-ignore \n  return <section style = {{backgroundColor:color}} className='week' onClick={handleClick}></section>;\n};\n\nexport default Week;\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/NavBar/NavBar.tsx",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":29},{"ruleId":"86","severity":1,"message":"90","line":6,"column":10,"nodeType":"88","messageId":"89","endLine":6,"endColumn":22},{"ruleId":"91","severity":1,"message":"92","line":13,"column":11,"nodeType":"88","messageId":"93","endLine":13,"endColumn":19},{"ruleId":"94","severity":1,"message":"95","line":36,"column":8,"nodeType":"96","endLine":36,"endColumn":50},{"ruleId":"86","severity":1,"message":"97","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"98","line":4,"column":27,"nodeType":"88","messageId":"89","endLine":4,"endColumn":38},{"ruleId":"86","severity":1,"message":"97","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"99","line":1,"column":28,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},{"ruleId":"100","severity":1,"message":"101","line":82,"column":57,"nodeType":"102","messageId":"103","endLine":82,"endColumn":59},{"ruleId":"86","severity":1,"message":"99","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":25},{"ruleId":"86","severity":1,"message":"104","line":61,"column":26,"nodeType":"88","messageId":"89","endLine":61,"endColumn":30},{"ruleId":"94","severity":1,"message":"105","line":13,"column":6,"nodeType":"106","endLine":13,"endColumn":20,"suggestions":"107"},{"ruleId":"86","severity":1,"message":"97","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"99","line":1,"column":28,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"@typescript-eslint/no-unused-vars","'ReactElement' is defined but never used.","Identifier","unusedVar","'queryHelpers' is defined but never used.","@typescript-eslint/no-redeclare","'Question' is already defined.","redeclared","react-hooks/exhaustive-deps","Assignments to the 'id' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'useEffect' is defined but never used.","'ApolloError' is defined but never used.","'useState' is defined but never used.","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["110"],"no-global-assign","no-unsafe-negation",{"desc":"111","fix":"112"},"Update the dependencies array to be: [props, props.userId]",{"range":"113","text":"114"},[400,414],"[props, props.userId]"]