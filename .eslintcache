[{"/Users/taylor/turing/4module/capstone/eras-fe/src/index.tsx":"1","/Users/taylor/turing/4module/capstone/eras-fe/src/reportWebVitals.ts":"2","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/App/App.tsx":"3","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/LoginPage/LoginPage.tsx":"4","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/CalendarComponent/CalendarComponent.tsx":"5","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormContainer/FormContainer.tsx":"6","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/RequiredForm/RequiredForm.tsx":"7","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/NavBar/NavBar.tsx":"8","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/HeaderComponent/HeaderComponent.tsx":"9","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Week/Week.tsx":"10","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/ProgressBar/ProgressBar.tsx":"11","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/TextQuestion/TextQuestion.tsx":"12","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Question/Question.tsx":"13","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormStartPage/FormStartPage.tsx":"14"},{"size":854,"mtime":1610302413572,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1608243605463,"results":"17","hashOfConfig":"16"},{"size":988,"mtime":1610304780084,"results":"18","hashOfConfig":"16"},{"size":798,"mtime":1609983807041,"results":"19","hashOfConfig":"16"},{"size":1492,"mtime":1610317540120,"results":"20","hashOfConfig":"16"},{"size":1765,"mtime":1610304685403,"results":"21","hashOfConfig":"16"},{"size":1949,"mtime":1610304685405,"results":"22","hashOfConfig":"16"},{"size":177,"mtime":1609983807033,"results":"23","hashOfConfig":"16"},{"size":442,"mtime":1610224537284,"results":"24","hashOfConfig":"16"},{"size":295,"mtime":1610224537285,"results":"25","hashOfConfig":"16"},{"size":427,"mtime":1610224537285,"results":"26","hashOfConfig":"16"},{"size":1150,"mtime":1610302413571,"results":"27","hashOfConfig":"16"},{"size":3169,"mtime":1610311014199,"results":"28","hashOfConfig":"16"},{"size":732,"mtime":1610304692058,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"c5br1r",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/taylor/turing/4module/capstone/eras-fe/src/index.tsx",[],["65","66"],"/Users/taylor/turing/4module/capstone/eras-fe/src/reportWebVitals.ts",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/App/App.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/LoginPage/LoginPage.tsx",["67"],"import React, { useEffect, useState } from 'react';\n const LoginPage = () =>{\n  let [userName,typeName] = useState('')\n\n  let [password,typePass] = useState('')\nlet createUserName = (event: React.ChangeEvent<HTMLInputElement>) =>{\n  typeName(event?.target.value)\n}\nlet createPass = (event: React.ChangeEvent<HTMLInputElement>) =>{\n  typePass(event?.target.value)\n}\n//are frontend validating this before we send it\n  return (\n    <section>\n    <form>\n\n      <input value = {userName} type = 'text' name = 'userName' placeholder=\"Username\" onChange = {createUserName}\n      ></input>\n      <input value = {password} type = 'password' name = 'password' placeholder=\"Password\" onChange = {createPass}\n      ></input>\n    </form>\n    <button>Submit</button>\n    </section>\n  )\n}\nexport default LoginPage","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/CalendarComponent/CalendarComponent.tsx",["68","69"],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormContainer/FormContainer.tsx",["70","71","72","73"],"import React, { ReactElement, useEffect, useState } from \"react\";\nimport { Question } from \"../Question/Question\";\nimport HeaderComponent from \"../HeaderComponent/HeaderComponent\";\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { queryHelpers } from \"@testing-library/react\";\n\ntype FormContaineProps = {\n  userId: number;\n};\n\ninterface Question {\n  question: string;\n  name: string;\n  id: number;\n  __typename: string;\n}\n\nexport const getQuestionsQuery = gql`\n  {\n    getOnboardingQuestions {\n      id\n      question\n      name\n      event_type\n    }\n  }\n`;\n\nexport const FormContainer = (props: FormContaineProps) => {\n  const [answers, setAnswer] = useState<string[]>([]);\n  const [currentQuestionIndex, changeQuestion] = useState(0);\n\n  const { loading, error, data } = useQuery(getQuestionsQuery);\n  if (error) {\n    return <h1>Error loading questions...</h1>;\n  }\n  if (loading || !data) {\n    return <h1>Loading...</h1>;\n  }\n\n  let questions = data.getOnboardingQuestions;\n\n  if (answers.length === questions.length) {\n    return <button type=\"submit\">Submit</button>;\n  }\n\n  return (\n    <>\n      {questions.length && (\n        <ProgressBar\n          questionsLength={questions.length}\n          answersLength={answers.length}\n        />\n      )}\n      {answers.length === 0 && <HeaderComponent />}\n      <form>\n        <Question\n          questionType={questions[currentQuestionIndex].event_type}\n          currentQuestion={questions[currentQuestionIndex].question}\n          changeQuestion={changeQuestion}\n          currentQuestionIndex={currentQuestionIndex}\n          setAnswer={setAnswer}\n          answers={answers}\n          userId={props.userId}\n        />\n      </form>\n    </>\n  );\n};\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/RequiredForm/RequiredForm.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/NavBar/NavBar.tsx",[],["74","75"],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/HeaderComponent/HeaderComponent.tsx",["76"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n\nconst HeaderComponent = () =>{\n  return (\n      <section>\n        {/* <img src = ''> logo*/}\n        <h1>Create My Calendar</h1>\n        <button >        \n          <Link to=\"/login\">Login</Link>\n        </button>\n        <button >        \n          <Link to=\"/calender\">Calendar</Link>\n        </button>\n      </section>\n  )\n}\nexport default HeaderComponent","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Week/Week.tsx",["77","78"],"import React, { useEffect, useState } from 'react';\nimport './Week.css';\n\ntype WeekProps = {\n  key: number;\n  index: number;\n};\n\nconst Week = (props: WeekProps) => {\n  let handleClick = () => {\n\n  };\n\n  return <section className='week' onClick={handleClick}></section>;\n};\n\nexport default Week;\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/ProgressBar/ProgressBar.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/TextQuestion/TextQuestion.tsx",[],"/Users/taylor/turing/4module/capstone/eras-fe/src/Components/Question/Question.tsx",["79"],"import React, { useState } from \"react\";\nimport { DocumentNode, gql, useMutation } from \"@apollo/client\";\n\ntype ChangeQuestion = (index: number) => void;\n\ntype SetAnswer = (answer: string[]) => void;\n\ntype QuestionProps = {\n  questionType: string;\n  changeQuestion: ChangeQuestion;\n  currentQuestionIndex: number;\n  currentQuestion: string;\n  setAnswer: SetAnswer;\n  answers: string[];\n  userId: number;\n};\n\nexport const Question = (props: QuestionProps) => {\n  const [date, updateDate] = useState(\"\");\n  const [endDate, updateEndDate] = useState(\"\");\n  const [answer, saveAnswer] = useState(\"\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    updateDate(event.target.value);\n    saveAnswer(event.target.value);\n  };\n  \n  let figureMutation = ():DocumentNode => { \n    let mutation:DocumentNode;\n      if (props.questionType === \"event\") {\n        mutation = gql`\n          mutation createEvent($userId: ID!, $name: String!, $date: String!) {\n            createEvent(input: { userId: $userId, name: $name, date: $birthdate })\n          }\n        `;\n      }\n      if (props.questionType === \"era\") {\n        mutation = gql`createEra($userId :ID!, $name:String!,startDate:String!,endDate:String!,$color:String!){\n          createEra(input :{\n            userId: $userId,\n            name: $name,\n            startDate:$startDate,\n            endDate:$endDate,\n            color:$color,\n          })\n        }`;\n    }\n    // @ts-ignore \n    return mutation\n  }\n\n  const [makeMutation, { data }] = useMutation(figureMutation());\n\n  return (\n    <>\n      <h1>{props.currentQuestion}</h1>\n      <input\n        data-testid=\"date\"\n        type=\"date\"\n        onChange={handleChange}\n        value={date}\n      ></input>\n      {props.questionType === \"event\" && (\n        <input\n          data-testid=\"date\"\n          type=\"date\"\n          onChange={handleChange}\n          value={endDate}\n        ></input>\n      )}\n      <button\n        type=\"button\"\n        onClick={() => {\n          props.changeQuestion(props.currentQuestionIndex + 1);\n          props.setAnswer([...props.answers, \"\"]);\n          updateDate(\"\");\n        }}\n      >\n        Skip\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          if (props.questionType === \"event\") {\n            makeMutation({\n              variables: {\n                userId: props.userId,\n                name: props.currentQuestion,\n                date: date.split(\"-\").reverse().join(\"-\"),\n              },\n            });\n          }\n          if (props.questionType === \"era\") {\n            makeMutation({\n              variables: {\n                userId: props.userId,\n                name: props.currentQuestion,\n                startDate: date.split(\"-\").reverse().join(\"-\"),\n                endDate: endDate.split(\"-\").reverse().join(\"-\"),\n                color: \"purple\",\n              },\n            });\n            updateEndDate(\"\");\n          }\n          props.changeQuestion(props.currentQuestionIndex + 1);\n          props.setAnswer([...props.answers, answer]);\n          updateDate(\"\");\n        }}\n      >\n        Next\n      </button>\n    </>\n  );\n};\n","/Users/taylor/turing/4module/capstone/eras-fe/src/Components/FormStartPage/FormStartPage.tsx",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":26},{"ruleId":"84","severity":1,"message":"85","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":26},{"ruleId":"84","severity":1,"message":"88","line":1,"column":28,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"89","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":29},{"ruleId":"84","severity":1,"message":"85","line":1,"column":31,"nodeType":"86","messageId":"87","endLine":1,"endColumn":40},{"ruleId":"84","severity":1,"message":"90","line":6,"column":10,"nodeType":"86","messageId":"87","endLine":6,"endColumn":22},{"ruleId":"91","severity":1,"message":"92","line":12,"column":11,"nodeType":"86","messageId":"93","endLine":12,"endColumn":19},{"ruleId":"80","replacedBy":"94"},{"ruleId":"82","replacedBy":"95"},{"ruleId":"84","severity":1,"message":"88","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"85","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":26},{"ruleId":"84","severity":1,"message":"88","line":1,"column":28,"nodeType":"86","messageId":"87","endLine":1,"endColumn":36},{"ruleId":"84","severity":1,"message":"96","line":52,"column":26,"nodeType":"86","messageId":"87","endLine":52,"endColumn":30},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'ReactElement' is defined but never used.","'queryHelpers' is defined but never used.","@typescript-eslint/no-redeclare","'Question' is already defined.","redeclared",["97"],["98"],"'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]